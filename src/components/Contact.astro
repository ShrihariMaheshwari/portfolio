---
import { Icon } from 'astro-icon/components';

type InputType = 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search' | 'date' | 'time' | 'datetime-local' | 'month' | 'week' | 'textarea';

interface FormField {
  id: string;
  label: string;
  type: InputType;
  placeholder: string;
  name: string;
  rows?: number;
}

const formFields: FormField[] = [
  {
    id: 'name',
    label: 'Name',
    type: 'text',
    placeholder: 'John Doe',
    name: 'from_name'  // Matches template variable
  },
  {
    id: 'email',
    label: 'Email',
    type: 'email',
    placeholder: 'john@example.com',
    name: 'user_email'  // For reply functionality
  },
  {
    id: 'subject',
    label: 'Subject',
    type: 'text',
    placeholder: 'Project Discussion',
    name: 'subject'
  },
  {
    id: 'message',
    label: 'Message',
    type: 'textarea',
    placeholder: 'Tell me about your project...',
    name: 'message',  // Matches template variable
    rows: 4
  }
];

const recipientName = "Shrihari"; 
---

<section id="contact" class="relative py-24 bg-white dark:bg-[#0B1120] transition-colors duration-300">
  <div class="container mx-auto px-4 max-w-6xl relative z-10">
    <div class="text-center mb-16 animate-fade-in">
      <h2 class="text-4xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        Let's Create Something Together
      </h2>
      <p class="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed">
        Have a project in mind?
        Drop me a message, and I'll get back to you as soon as possible.
      </p>
    </div>

    <div class="max-w-2xl mx-auto">
      <form id="contact-form" class="space-y-8">
        <!-- Hidden input for recipient name -->
        <input type="hidden" name="to_name" value={recipientName} />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          {formFields.slice(0, 2).map((field, index) => (
            <div class="form-group animate-slide-up" style={`--delay: ${0.2 + index * 0.1}s`}>
              <div class="relative">
                <input
                  type={field.type === 'textarea' ? undefined : field.type}
                  id={field.id}
                  name={field.name}
                  class="peer w-full px-4 pt-6 pb-2 text-gray-900 dark:text-white 
                         bg-white/5 dark:bg-[#1a2333]/50 rounded-lg
                         border-2 border-gray-200/50 dark:border-gray-700/50
                         hover:border-blue-500/50 dark:hover:border-blue-400/50
                         focus:border-blue-500 dark:focus:border-blue-400
                         focus:ring-0 transition-all duration-300
                         placeholder-transparent backdrop-blur-sm"
                  placeholder={field.placeholder}
                  required
                />
                <label
                  for={field.id}
                  class="absolute text-sm text-gray-500 dark:text-gray-400
                         duration-300 transform -translate-y-3 z-10
                         origin-[0] left-4 top-4
                         peer-placeholder-shown:translate-y-0 
                         peer-placeholder-shown:text-base 
                         peer-focus:text-sm peer-focus:-translate-y-3
                         peer-focus:text-blue-500"
                >
                  {field.label}
                </label>
              </div>
            </div>
          ))}
        </div>

        {formFields.slice(2).map((field, index) => (
          <div class="form-group animate-slide-up" style={`--delay: ${0.4 + index * 0.1}s`}>
            <div class="relative">
              {field.type === 'textarea' ? (
                <textarea
                  id={field.id}
                  name={field.name}
                  rows={field.rows}
                  class="peer w-full px-4 pt-6 pb-2 text-gray-900 dark:text-white 
                         bg-white/5 dark:bg-[#1a2333]/50 rounded-lg
                         border-2 border-gray-200/50 dark:border-gray-700/50
                         hover:border-blue-500/50 dark:hover:border-blue-400/50
                         focus:border-blue-500 dark:focus:border-blue-400
                         focus:ring-0 transition-all duration-300
                         placeholder-transparent backdrop-blur-sm resize-none"
                  placeholder={field.placeholder}
                  required
                ></textarea>
              ) : (
                <input
                  type={field.type}
                  id={field.id}
                  name={field.name}
                  class="peer w-full px-4 pt-6 pb-2 text-gray-900 dark:text-white 
                         bg-white/5 dark:bg-[#1a2333]/50 rounded-lg
                         border-2 border-gray-200/50 dark:border-gray-700/50
                         hover:border-blue-500/50 dark:hover:border-blue-400/50
                         focus:border-blue-500 dark:focus:border-blue-400
                         focus:ring-0 transition-all duration-300
                         placeholder-transparent backdrop-blur-sm"
                  placeholder={field.placeholder}
                  required
                />
              )}
              <label
                for={field.id}
                class="absolute text-sm text-gray-500 dark:text-gray-400
                       duration-300 transform -translate-y-3 z-10
                       origin-[0] left-4 top-4
                       peer-placeholder-shown:translate-y-0 
                       peer-placeholder-shown:text-base 
                       peer-focus:text-sm peer-focus:-translate-y-3
                       peer-focus:text-blue-500"
              >
                {field.label}
              </label>
            </div>
          </div>
        ))}

        <div class="animate-slide-up" style="--delay: 0.6s">
          <button
            type="submit"
            id="submit-button"
            class="group relative w-full px-6 py-4 bg-gradient-to-br from-blue-500 to-blue-600 
                   text-white rounded-lg font-medium overflow-hidden
                   transition-all duration-300 hover:-translate-y-1
                   focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 
                   dark:focus:ring-offset-[#0B1120]"
          >
            <span class="relative z-10 flex items-center justify-center gap-2">
              <span>Send Message</span>
              <Icon name="mdi:send" class="w-4 h-4 transition-transform duration-300 group-hover:translate-x-1" />
            </span>
          </button>
        </div>
      </form>
    </div>
  </div>
</section>

<script is:inline src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>

<script>
import toast from 'react-hot-toast';

// Add type definitions for EmailJS
declare const emailjs: {
  init: (publicKey: string) => void;
  sendForm: (
    serviceId: string,
    templateId: string,
    form: HTMLFormElement
  ) => Promise<{
    status: number;
    text: string;
  }>;
};

// Initialize EmailJS
(function() {
  emailjs.init("lJwm-ZeWnTmEbq1qi"); // Your EmailJS public key
})();

// Form submission handler with enhanced validation
document.getElementById('contact-form')?.addEventListener('submit', function(e: Event) {
  e.preventDefault();
  
  const form = e.target as HTMLFormElement;
  const nameInput = form.querySelector('#name') as HTMLInputElement;
  const emailInput = form.querySelector('#email') as HTMLInputElement;
  const subjectInput = form.querySelector('#subject') as HTMLInputElement;
  const messageInput = form.querySelector('#message') as HTMLTextAreaElement;
  const button = form.querySelector('button[type="submit"]') as HTMLButtonElement;
  const originalContent = button.innerHTML;

  // Clear any existing error messages first
  clearAllErrors(form);
  
  // Enhanced validation
  let isValid = true;
  
  if (!nameInput.value.trim()) {
    showInputError(nameInput, 'Please enter your name');
    isValid = false;
  }
  
  if (!emailInput.value.trim()) {
    showInputError(emailInput, 'Please enter your email address');
    isValid = false;
  } else if (!/^\S+@\S+\.\S+$/.test(emailInput.value)) {
    showInputError(emailInput, 'Please enter a valid email address');
    isValid = false;
  }
  
  if (!subjectInput.value.trim()) {
    showInputError(subjectInput, 'Please enter a subject');
    isValid = false;
  }
  
  if (!messageInput.value.trim()) {
    showInputError(messageInput, 'Please enter your message');
    isValid = false;
  } else if (messageInput.value.trim().length < 10) {
    showInputError(messageInput, 'Your message should be at least 10 characters');
    isValid = false;
  }
  
  if (!isValid) {
    // Show toast for validation errors
    toast.error('Please fix the errors in the form', {
      duration: 3000,
      style: {
        background: document.documentElement.classList.contains('dark') ? '#1f2937' : '#ffffff',
        color: document.documentElement.classList.contains('dark') ? '#ffffff' : '#000000',
        border: '1px solid',
        borderColor: document.documentElement.classList.contains('dark') ? '#374151' : '#e5e7eb',
      },
    });
    return;
  }

  const loadingToast = toast.loading('Sending message...');
  
  button.disabled = true;
  button.innerHTML = `
    <span class="flex items-center gap-2">
      <svg class="animate-spin h-5 w-5" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"></path>
      </svg>
      Sending...
    </span>
  `;

  emailjs.sendForm(
    'service_8jdm3sg',  // Replace with your EmailJS service ID
    'template_3eycr38', // Replace with your EmailJS template ID
    form
  ).then(
    function() {
      toast.dismiss(loadingToast);
      toast.success('Message sent successfully! I\'ll get back to you soon.', {
        duration: 5000,
        style: {
          background: document.documentElement.classList.contains('dark') ? '#1f2937' : '#ffffff',
          color: document.documentElement.classList.contains('dark') ? '#ffffff' : '#000000',
          border: '1px solid',
          borderColor: document.documentElement.classList.contains('dark') ? '#374151' : '#e5e7eb',
        },
      });
      form.reset();
      setTimeout(() => {
        button.disabled = false;
        button.innerHTML = originalContent;
      }, 500);
    },
    function(error: { text: string }) {
      toast.dismiss(loadingToast);
      toast.error('Failed to send message. Please try again.', {
        duration: 5000,
        style: {
          background: document.documentElement.classList.contains('dark') ? '#1f2937' : '#ffffff',
          color: document.documentElement.classList.contains('dark') ? '#ffffff' : '#000000',
          border: '1px solid',
          borderColor: document.documentElement.classList.contains('dark') ? '#374151' : '#e5e7eb',
        },
      });

      console.log('FAILED...', error);
      button.disabled = false;
      button.innerHTML = originalContent;
    }
  );
});

// Function to show validation errors
function showInputError(input: HTMLInputElement | HTMLTextAreaElement, message: string) {
  // Add error class to the input
  input.classList.add('border-red-500');
  
  // Create error message element
  const errorMsg = document.createElement('p');
  errorMsg.classList.add('text-red-500', 'text-xs', 'mt-1', 'input-error');
  errorMsg.textContent = message;
  
  // Remove any existing error message for this input
  const existingError = input.parentElement?.querySelector('.input-error');
  if (existingError) existingError.remove();
  
  // Add the error message after the input
  input.parentElement?.appendChild(errorMsg);
  
  // Set up event listener to remove error on input
  input.addEventListener('input', function() {
    input.classList.remove('border-red-500');
    const errorToRemove = input.parentElement?.querySelector('.input-error');
    if (errorToRemove) errorToRemove.remove();
  }, { once: true });
  
  // Focus the first invalid input
  if (!document.querySelector(':focus')) {
    input.focus();
  }
}

// Function to clear all error messages
function clearAllErrors(form: HTMLFormElement) {
  const errorMessages = form.querySelectorAll('.input-error');
  errorMessages.forEach(error => error.remove());
  
  const errorInputs = form.querySelectorAll('.border-red-500');
  errorInputs.forEach(input => {
    if (input instanceof HTMLElement) {
      input.classList.remove('border-red-500');
    }
  });
}

// Add keypress event to submit form on Enter key in the last input
document.querySelector('#message')?.addEventListener('keypress', function(e) {
  // Use type assertion to tell TypeScript this is a KeyboardEvent
  const keyEvent = e as KeyboardEvent;
  
  if (keyEvent.key === 'Enter' && keyEvent.ctrlKey) {
    document.getElementById('submit-button')?.click();
  }
});
</script>

<style>
/* Animation for error messages */
.input-error {
  animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-5px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Style placeholder text in dark mode */
.dark input::placeholder,
.dark textarea::placeholder {
  color: rgba(156, 163, 175, 0.5);
}

/* Improve focus states for accessibility */
input:focus, textarea:focus {
  outline: none;
  box-shadow: 0 0 0 1px rgba(59, 130, 246, 0.5);
}
</style>