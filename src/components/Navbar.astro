---
// src/components/Navbar.astro
import AnimateIn from './animations/AnimateIn';
import { Menu, X } from 'lucide-react';

const navItems = [
  { name: "Home", href: "#home" },
  { name: "Projects", href: "#projects" },
  { name: "About", href: "#about" },
  { name: "Experience", href: "#experience" },
  { name: "Contact", href: "#contact" }
];
---

<header class="fixed top-0 left-0 right-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800">
  <AnimateIn client:load animation="slideDown">
    <nav class="container mx-auto relative">
      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center justify-center h-18">
        <div class="flex items-center space-x-12">
          {navItems.map((item) => (
            <a
              href={item.href}
              class="text-lg font-bold text-gray-800 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 
                     transition-all duration-200 hover:-translate-y-0.5"
            >
              {item.name}
            </a>
          ))}
        </div>
      </div>

      <!-- Mobile Navigation -->
      <div class="md:hidden flex h-[72px] items-center justify-between px-6">
        <button
          id="mobile-menu-button"
          class="p-2 text-gray-800 dark:text-gray-100 -ml-6"
          aria-label="Toggle menu"
        >
          <Menu size={24} />
        </button>
        
        <div class="flex items-center">
          <slot />
        </div>
      </div>
    </nav>
  </AnimateIn>
</header>

<!-- Mobile Menu Container -->
<div class="md:hidden">
  <!-- Mobile Menu Overlay -->
  <div
    id="mobile-menu"
    class="fixed inset-0 bg-black/5 dark:bg-black/20 opacity-0 pointer-events-none transition-opacity duration-300 z-40"
  ></div>

  <!-- Mobile Menu Panel -->
  <div
    id="mobile-menu-panel"
    class="fixed top-0 left-0 w-64 h-[100dvh] bg-white dark:bg-gray-900 transform -translate-x-full 
           transition-all duration-300 ease-in-out shadow-xl z-50"
  >
    <!-- Close Button -->
    <button
      id="close-menu"
      class="absolute top-5 right-4 p-2 text-gray-800 dark:text-gray-100 rounded-full 
             hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200 hover:rotate-90"
      aria-label="Close menu"
    >
      <X size={25} />
    </button>

    <div class="flex flex-col p-6 space-y-6 pt-24">
      {navItems.map((item) => (
        <a
          href={item.href}
          class="text-lg font-bold text-gray-800 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 
                 transition-all duration-200 mobile-menu-item"
        >
          {item.name}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button')!;
  const mobileMenu = document.getElementById('mobile-menu')!;
  const mobileMenuPanel = document.getElementById('mobile-menu-panel')!;
  const closeMenuButton = document.getElementById('close-menu')!;
  const mobileMenuItems = document.querySelectorAll<HTMLElement>('.mobile-menu-item')!;
  const body = document.body;

  let isMenuOpen = false;

  function animateMenuItems(show: boolean) {
    mobileMenuItems.forEach((item, index) => {
      if (show) {
        item.style.opacity = '0';
        item.style.transform = 'translateX(-20px)';
        setTimeout(() => {
          item.style.transition = 'all 0.3s ease-out';
          item.style.opacity = '1';
          item.style.transform = 'translateX(0)';
        }, index * 100);
      } else {
        item.style.transition = 'all 0.2s ease-in';
        item.style.opacity = '0';
        item.style.transform = 'translateX(-10px)';
      }
    });
  }

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
    
    if (isMenuOpen) {
      mobileMenu.classList.remove('opacity-0', 'pointer-events-none');
      mobileMenuPanel.classList.remove('-translate-x-full');
      setTimeout(() => animateMenuItems(true), 300);
    } else {
      mobileMenu.classList.add('opacity-0', 'pointer-events-none');
      mobileMenuPanel.classList.add('-translate-x-full');
      animateMenuItems(false);
    }
  }

  // Event Listeners
  mobileMenuButton.addEventListener('click', toggleMenu);
  closeMenuButton.addEventListener('click', toggleMenu);
  mobileMenu.addEventListener('click', toggleMenu);
  mobileMenuItems.forEach(item => {
    item.addEventListener('click', toggleMenu);
  });

  // Cleanup function
  document.addEventListener('astro:before-swap', () => {
    mobileMenuItems.forEach(item => {
      item.style.transition = '';
      item.style.opacity = '';
      item.style.transform = '';
    });
  });
</script>